start_day = "",
end_day = "",
filename = ""
){
# insert "interested" day period
day = seq(as.Date(start_day),
as.Date(end_day),"day") %>%
format(., format = "%Y-%m-%d")
# insert Weather Station data
Rawdata_min = Dataclean(filename = filename)
# extract the date data based on "interested" day
day_select = function(day){
exp_day = Rawdata_min[grep(day,Rawdata_min$TIMESTAMP),]
return(exp_day)
}
# apply day_select function to extract the certain day's data
start_to_endday = apply(matrix(day,nrow = 1),2,day_select)
### calculate the daily temperature
# define rv.
daily_temperature = numeric()
temperature_sd = numeric()
daily_temperature_sd = numeric()
# loop to caculate by each row
for (i in 1:length(day)) {
daily_temperature[[i]] = mean(start_to_endday[[i]]$AirTC_Avg)
daily_temperature_sd[[i]] = sd(start_to_endday[[i]]$AirTC_Avg)
}
day_inform = data.frame(day,daily_temperature,daily_temperature_sd)
colnames(day_inform) = c("Date","Avr_Temp","Sd_Temp")
# fill the NA with average daily temperature
na.pos = is.na(day_inform$Avr_Temp)
day_inform$Avr_Temp[which(na.pos)] =
mean(na.omit(day_inform$Avr_Temp))
return(day_inform)
### calculate the mean temperature of selected term
# define rv.
j=1
temperature = c()
SD =c()
# set a function for "including_period": how long for meaning, "divided_period": how timelapse for output
period_temperature = function(including_period,divided_period){
while (j < length(day)) {
a= mean(day_inform$Avr_Temp[j:(j+including_period)])
b = sd(day_inform$Avr_Temp[j:(j+including_period)])
temperature = c(temperature,a)
SD = c(SD,b)
j = j+divided_period
}
return(cbind(temperature,SD))
}
month_raw = period_temperature(34,7)
mouth_temp= month_raw[1:((length(month_raw)/ncol(month_raw))-floor(34/7)),]
mouth_temp = period_temperature(34,7) %>%
.[1:((length(.)/ncol(.))-floor(34/7)),]
}
Dailytemperature_calculate(start_day = "2019/10/10",end_day = "2019/12/11", filename = "CR300Series-direct-Eco-park_Minutely_Record.dat")
#### HOBO_data sort out
library(dplyr)
# data cleaner
setwd("/Users/supermonk00/Desktop/academy/programing/R/St.Kitts/Code")
source("(Function)Min_data cleaner.R")
Dailytemperature_calculate(start_day = "2019/10/10",end_day = "2019/12/11", filename = "CR300Series-direct-Eco-park_Minutely_Record.dat")
j=1
temperature = c()
SD =c()
period_temperature = function(including_period,divided_period){
while (j < length(day)) {
a= mean(day_inform$Avr_Temp[j:(j+including_period)])
b = sd(day_inform$Avr_Temp[j:(j+including_period)])
temperature = c(temperature,a)
SD = c(SD,b)
j = j+divided_period
}
return(cbind(temperature,SD))
}
month_raw = period_temperature(34,7)
mouth_temp= month_raw[1:((length(month_raw)/ncol(month_raw))-floor(34/7)),]
day = seq(as.Date(start_day),
as.Date(end_day),"day") %>%
format(., format = "%Y-%m-%d")
day = seq(as.Date("2019/09/10"),
as.Date("2019/12/10"),"day") %>%
format(., format = "%Y-%m-%d")
period_temperature = function(including_period,divided_period){
while (j < length(day)) {
a= mean(day_inform$Avr_Temp[j:(j+including_period)])
b = sd(day_inform$Avr_Temp[j:(j+including_period)])
temperature = c(temperature,a)
SD = c(SD,b)
j = j+divided_period
}
return(cbind(temperature,SD))
}
month_raw = period_temperature(34,7)
Rawdata_min = Dataclean(filename = "CR300Series-direct-Eco-park_Minutely_Record.dat")
# extract the date data based on "interested" day
day_select = function(day){
exp_day = Rawdata_min[grep(day,Rawdata_min$TIMESTAMP),]
return(exp_day)
}
# apply day_select function to extract the certain day's data
start_to_endday = apply(matrix(day,nrow = 1),2,day_select)
daily_temperature = numeric()
temperature_sd = numeric()
daily_temperature_sd = numeric()
# loop to caculate by each row
for (i in 1:length(day)) {
daily_temperature[[i]] = mean(start_to_endday[[i]]$AirTC_Avg)
daily_temperature_sd[[i]] = sd(start_to_endday[[i]]$AirTC_Avg)
}
day_inform = data.frame(day,daily_temperature,daily_temperature_sd)
colnames(day_inform) = c("Date","Avr_Temp","Sd_Temp")
na.pos = is.na(day_inform$Avr_Temp)
day_inform$Avr_Temp[which(na.pos)] =
mean(na.omit(day_inform$Avr_Temp))
return(day_inform)
j=1
temperature = c()
SD =c()
period_temperature = function(including_period,divided_period){
while (j < length(day)) {
a= mean(day_inform$Avr_Temp[j:(j+including_period)])
b = sd(day_inform$Avr_Temp[j:(j+including_period)])
temperature = c(temperature,a)
SD = c(SD,b)
j = j+divided_period
}
return(cbind(temperature,SD))
}
month_raw = period_temperature(34,7)
mouth_temp= month_raw[1:((length(month_raw)/ncol(month_raw))-floor(34/7)),]
mouth_temp
mouth_temp = period_temperature(34,7) %>%
.[1:((length(.)/ncol(.))-floor(34/7)),]
mouth_temp
mouth_temp = period_temperature(1,1) %>%
.[1:((length(.)/ncol(.))-floor(1/1)),]
mouth_temp
day
paste("first column", day[1])
?paste
print("first column",day[1],day[2])
print("first column",day[1])
paste("first column:",day[1])
paste("first column:",day[1], day[3])
paste("first column:",day[1],to, day[1+20])
paste("first column:",day[1],to, day[1+20])
paste("first column:",day[1],"to", day[1+20])
mouth_temp = period_temperature(1,1) %>%
.[1:((length(.)/ncol(.))-floor(1/1)),]
paste("first column:",day[1],"to", day[1+1])
mouth_temp
Dailytemperature_calculate = function(
start_day = "",
end_day = "",
filename = "",
daysforavg = 1,
daysfordivid = 1
){
# insert "interested" day period
day = seq(as.Date(start_day),
as.Date(end_day),"day") %>%
format(., format = "%Y-%m-%d")
# insert Weather Station data
Rawdata_min = Dataclean(filename = filename)
# extract the date data based on "interested" day
day_select = function(day){
exp_day = Rawdata_min[grep(day,Rawdata_min$TIMESTAMP),]
return(exp_day)
}
# apply day_select function to extract the certain day's data
start_to_endday = apply(matrix(day,nrow = 1),2,day_select)
### calculate the daily temperature
# define rv.
daily_temperature = numeric()
temperature_sd = numeric()
daily_temperature_sd = numeric()
# loop to caculate by each row
for (i in 1:length(day)) {
daily_temperature[[i]] = mean(start_to_endday[[i]]$AirTC_Avg)
daily_temperature_sd[[i]] = sd(start_to_endday[[i]]$AirTC_Avg)
}
day_inform = data.frame(day,daily_temperature,daily_temperature_sd)
colnames(day_inform) = c("Date","Avr_Temp","Sd_Temp")
# fill the NA with average daily temperature
na.pos = is.na(day_inform$Avr_Temp)
day_inform$Avr_Temp[which(na.pos)] =
mean(na.omit(day_inform$Avr_Temp))
return(day_inform)
### calculate the mean temperature of selected term
# define rv.
j=1
temperature = c()
SD =c()
# set a function for "including_period": how long for meaning, "divided_period": how timelapse for output
period_temperature = function(including_period,divided_period){
while (j < length(day)) {
a= mean(day_inform$Avr_Temp[j:(j+including_period)])
b = sd(day_inform$Avr_Temp[j:(j+including_period)])
temperature = c(temperature,a)
SD = c(SD,b)
j = j+divided_period
}
return(cbind(temperature,SD))
}
period_temp = period_temperature(daysforavg,daysfordivid) %>%
.[1:((length(.)/ncol(.))-floor(daysforavg/daysfordivid)),]
paste("first column:",day[1],"to", day[1+daysforavg])
return(period_temp)
}
Dailytemperature_calculate(start_day = "2019/10/01",end_day = "2020/02/01",filename = "CR300Series-direct-Mansion_Minutely_Record.dat",daysforavg = 5,daysfordivid = 2)
Dailytemperature_calculate = function(
start_day = "",
end_day = "",
filename = "",
daysforavg = 1,
daysfordivid = 1
){
# insert "interested" day period
day = seq(as.Date(start_day),
as.Date(end_day),"day") %>%
format(., format = "%Y-%m-%d")
# insert Weather Station data
Rawdata_min = Dataclean(filename = filename)
# extract the date data based on "interested" day
day_select = function(day){
exp_day = Rawdata_min[grep(day,Rawdata_min$TIMESTAMP),]
return(exp_day)
}
# apply day_select function to extract the certain day's data
start_to_endday = apply(matrix(day,nrow = 1),2,day_select)
### calculate the daily temperature
# define rv.
daily_temperature = numeric()
temperature_sd = numeric()
daily_temperature_sd = numeric()
# loop to caculate by each row
for (i in 1:length(day)) {
daily_temperature[[i]] = mean(start_to_endday[[i]]$AirTC_Avg)
daily_temperature_sd[[i]] = sd(start_to_endday[[i]]$AirTC_Avg)
}
day_inform = data.frame(day,daily_temperature,daily_temperature_sd)
colnames(day_inform) = c("Date","Avr_Temp","Sd_Temp")
# fill the NA with average daily temperature
na.pos = is.na(day_inform$Avr_Temp)
day_inform$Avr_Temp[which(na.pos)] =
mean(na.omit(day_inform$Avr_Temp))
### calculate the mean temperature of selected term
# define rv.
j=1
temperature = c()
SD =c()
# set a function for "including_period": how long for meaning, "divided_period": how timelapse for output
period_temperature = function(including_period,divided_period){
while (j < length(day)) {
a= mean(day_inform$Avr_Temp[j:(j+including_period)])
b = sd(day_inform$Avr_Temp[j:(j+including_period)])
temperature = c(temperature,a)
SD = c(SD,b)
j = j+divided_period
}
return(cbind(temperature,SD))
}
period_temp = period_temperature(daysforavg,daysfordivid) %>%
.[1:((length(.)/ncol(.))-floor(daysforavg/daysfordivid)),]
paste("first column:",day[1],"to", day[1+daysforavg])
return(period_temp)
}
Dailytemperature_calculate(start_day = "2019/10/01",end_day = "2020/02/01",filename = "CR300Series-direct-Mansion_Minutely_Record.dat",daysforavg = 5,daysfordivid = 2)
Dailytemperature_calculate = function(
start_day = "",
end_day = "",
filename = "",
daysforavg = 1,
daysfordivid = 1
){
# insert "interested" day period
day = seq(as.Date(start_day),
as.Date(end_day),"day") %>%
format(., format = "%Y-%m-%d")
# insert Weather Station data
Rawdata_min = Dataclean(filename = filename)
# extract the date data based on "interested" day
day_select = function(day){
exp_day = Rawdata_min[grep(day,Rawdata_min$TIMESTAMP),]
return(exp_day)
}
# apply day_select function to extract the certain day's data
start_to_endday = apply(matrix(day,nrow = 1),2,day_select)
### calculate the daily temperature
# define rv.
daily_temperature = numeric()
temperature_sd = numeric()
daily_temperature_sd = numeric()
# loop to caculate by each row
for (i in 1:length(day)) {
daily_temperature[[i]] = mean(start_to_endday[[i]]$AirTC_Avg)
daily_temperature_sd[[i]] = sd(start_to_endday[[i]]$AirTC_Avg)
}
day_inform = data.frame(day,daily_temperature,daily_temperature_sd)
colnames(day_inform) = c("Date","Avr_Temp","Sd_Temp")
# fill the NA with average daily temperature
na.pos = is.na(day_inform$Avr_Temp)
day_inform$Avr_Temp[which(na.pos)] =
mean(na.omit(day_inform$Avr_Temp))
### calculate the mean temperature of selected term
# define rv.
j=1
temperature = c()
SD =c()
# set a function for "including_period": how long for meaning, "divided_period": how timelapse for output
period_temperature = function(including_period,divided_period){
while (j < length(day)) {
a= mean(day_inform$Avr_Temp[j:(j+including_period)])
b = sd(day_inform$Avr_Temp[j:(j+including_period)])
temperature = c(temperature,a)
SD = c(SD,b)
j = j+divided_period
}
return(cbind(temperature,SD))
}
period_temp = period_temperature(daysforavg,daysfordivid) %>%
.[1:((length(.)/ncol(.))-floor(daysforavg/daysfordivid)),]
print(paste("first column:",day[1],"to", day[1+daysforavg]))
return(period_temp)
}
Dailytemperature_calculate(start_day = "2019/10/01",end_day = "2020/02/01",filename = "CR300Series-direct-Mansion_Minutely_Record.dat",daysforavg = 5,daysfordivid = 2)
Dailytemperature_calculate(start_day = "2019/10/01",end_day = "2020/02/01",filename = "CR300Series-direct-Mansion_Minutely_Record.dat",daysforavg = 2,daysfordivid = 5)
Dailytemperature_calculate = function(
start_day = "",
end_day = "",
filename = "",
daysforavg = 1,
daysfordivid = 1
){
# insert "interested" day period
day = seq(as.Date(start_day),
as.Date(end_day),"day") %>%
format(., format = "%Y-%m-%d")
# insert Weather Station data
Rawdata_min = Dataclean(filename = filename)
# extract the date data based on "interested" day
day_select = function(day){
exp_day = Rawdata_min[grep(day,Rawdata_min$TIMESTAMP),]
return(exp_day)
}
# apply day_select function to extract the certain day's data
start_to_endday = apply(matrix(day,nrow = 1),2,day_select)
### calculate the daily temperature
# define rv.
daily_temperature = numeric()
temperature_sd = numeric()
daily_temperature_sd = numeric()
# loop to caculate by each row
for (i in 1:length(day)) {
daily_temperature[[i]] = mean(start_to_endday[[i]]$AirTC_Avg)
daily_temperature_sd[[i]] = sd(start_to_endday[[i]]$AirTC_Avg)
}
day_inform = data.frame(day,daily_temperature,daily_temperature_sd)
colnames(day_inform) = c("Date","Avr_Temp","Sd_Temp")
# fill the NA with average daily temperature
na.pos = is.na(day_inform$Avr_Temp)
day_inform$Avr_Temp[which(na.pos)] =
mean(na.omit(day_inform$Avr_Temp))
### calculate the mean temperature of selected term
# define rv.
j=1
temperature = c()
SD =c()
# set a function for "including_period": how long for meaning, "divided_period": how timelapse for output
period_temperature = function(including_period,divided_period){
while (j < length(day)) {
a= mean(day_inform$Avr_Temp[j:(j+including_period)])
b = sd(day_inform$Avr_Temp[j:(j+including_period)])
temperature = c(temperature,a)
SD = c(SD,b)
j = j+divided_period
}
return(cbind(temperature,SD))
}
while (daysforavg > length(day)) {
print("Don't have that long data for averaging")
}
period_temp = period_temperature(daysforavg,daysfordivid) %>%
.[1:((length(.)/ncol(.))-floor(daysforavg/daysfordivid)),]
print(paste("first column:",day[1],"to", day[1+daysforavg]))
return(period_temp)
}
Dailytemperature_calculate(start_day = "2019/10/01",end_day = "2020/02/01",filename = "CR300Series-direct-Mansion_Minutely_Record.dat",daysforavg = 200,daysfordivid = 5)
Dailytemperature_calculate = function(
start_day = "",
end_day = "",
filename = "",
daysforavg = 1,
daysfordivid = 1
){
# insert "interested" day period
day = seq(as.Date(start_day),
as.Date(end_day),"day") %>%
format(., format = "%Y-%m-%d")
# insert Weather Station data
Rawdata_min = Dataclean(filename = filename)
# extract the date data based on "interested" day
day_select = function(day){
exp_day = Rawdata_min[grep(day,Rawdata_min$TIMESTAMP),]
return(exp_day)
}
# apply day_select function to extract the certain day's data
start_to_endday = apply(matrix(day,nrow = 1),2,day_select)
### calculate the daily temperature
# define rv.
daily_temperature = numeric()
temperature_sd = numeric()
daily_temperature_sd = numeric()
# loop to caculate by each row
for (i in 1:length(day)) {
daily_temperature[[i]] = mean(start_to_endday[[i]]$AirTC_Avg)
daily_temperature_sd[[i]] = sd(start_to_endday[[i]]$AirTC_Avg)
}
day_inform = data.frame(day,daily_temperature,daily_temperature_sd)
colnames(day_inform) = c("Date","Avr_Temp","Sd_Temp")
# fill the NA with average daily temperature
na.pos = is.na(day_inform$Avr_Temp)
day_inform$Avr_Temp[which(na.pos)] =
mean(na.omit(day_inform$Avr_Temp))
### calculate the mean temperature of selected term
# define rv.
j=1
temperature = c()
SD =c()
# set a function for "including_period": how long for meaning, "divided_period": how timelapse for output
period_temperature = function(including_period,divided_period){
while (j < length(day)) {
a= mean(day_inform$Avr_Temp[j:(j+including_period)])
b = sd(day_inform$Avr_Temp[j:(j+including_period)])
temperature = c(temperature,a)
SD = c(SD,b)
j = j+divided_period
}
return(cbind(temperature,SD))
}
if (daysforavg > length(day)) {
print("Don't have that long data for averaging")
}
period_temp = period_temperature(daysforavg,daysfordivid) %>%
.[1:((length(.)/ncol(.))-floor(daysforavg/daysfordivid)),]
print(paste("first column:",day[1],"to", day[1+daysforavg]))
return(period_temp)
}
Dailytemperature_calculate(start_day = "2019/10/01",end_day = "2020/02/01",filename = "CR300Series-direct-Mansion_Minutely_Record.dat",daysforavg = 200,daysfordivid = 5)
Dailytemperature_calculate = function(
start_day = "",
end_day = "",
filename = "",
daysforavg = 1,
daysfordivid = 1
){
# insert "interested" day period
day = seq(as.Date(start_day),
as.Date(end_day),"day") %>%
format(., format = "%Y-%m-%d")
# insert Weather Station data
Rawdata_min = Dataclean(filename = filename)
# extract the date data based on "interested" day
day_select = function(day){
exp_day = Rawdata_min[grep(day,Rawdata_min$TIMESTAMP),]
return(exp_day)
}
# apply day_select function to extract the certain day's data
start_to_endday = apply(matrix(day,nrow = 1),2,day_select)
### calculate the daily temperature
# define rv.
daily_temperature = numeric()
temperature_sd = numeric()
daily_temperature_sd = numeric()
# loop to caculate by each row
for (i in 1:length(day)) {
daily_temperature[[i]] = mean(start_to_endday[[i]]$AirTC_Avg)
daily_temperature_sd[[i]] = sd(start_to_endday[[i]]$AirTC_Avg)
}
day_inform = data.frame(day,daily_temperature,daily_temperature_sd)
colnames(day_inform) = c("Date","Avr_Temp","Sd_Temp")
# fill the NA with average daily temperature
na.pos = is.na(day_inform$Avr_Temp)
day_inform$Avr_Temp[which(na.pos)] =
mean(na.omit(day_inform$Avr_Temp))
### calculate the mean temperature of selected term
# define rv.
j=1
temperature = c()
SD =c()
# set a function for "including_period": how long for meaning, "divided_period": how timelapse for output
period_temperature = function(including_period,divided_period){
while (j < length(day)) {
a= mean(day_inform$Avr_Temp[j:(j+including_period)])
b = sd(day_inform$Avr_Temp[j:(j+including_period)])
temperature = c(temperature,a)
SD = c(SD,b)
j = j+divided_period
}
return(cbind(temperature,SD))
}
if (daysforavg > length(day)) {
print("Don't have that long data for averaging")
}else{
period_temp = period_temperature(daysforavg,daysfordivid) %>%
.[1:((length(.)/ncol(.))-floor(daysforavg/daysfordivid)),]
print(paste("first column:",day[1],"to", day[1+daysforavg]))
return(period_temp)
}
}
Dailytemperature_calculate(start_day = "2019/10/01",end_day = "2020/02/01",filename = "CR300Series-direct-Mansion_Minutely_Record.dat",daysforavg = 200,daysfordivid = 5)
